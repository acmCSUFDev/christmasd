// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: christmas.proto

package christmaspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LEDClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*LEDClientMessage_Authenticate
	//	*LEDClientMessage_GetLedCanvasInfo
	//	*LEDClientMessage_SetLedCanvas
	//	*LEDClientMessage_GetLeds
	//	*LEDClientMessage_SetLeds
	Message isLEDClientMessage_Message `protobuf_oneof:"message"`
}

func (x *LEDClientMessage) Reset() {
	*x = LEDClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LEDClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LEDClientMessage) ProtoMessage() {}

func (x *LEDClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LEDClientMessage.ProtoReflect.Descriptor instead.
func (*LEDClientMessage) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{0}
}

func (m *LEDClientMessage) GetMessage() isLEDClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *LEDClientMessage) GetAuthenticate() *AuthenticateRequest {
	if x, ok := x.GetMessage().(*LEDClientMessage_Authenticate); ok {
		return x.Authenticate
	}
	return nil
}

func (x *LEDClientMessage) GetGetLedCanvasInfo() *GetLEDCanvasInfoRequest {
	if x, ok := x.GetMessage().(*LEDClientMessage_GetLedCanvasInfo); ok {
		return x.GetLedCanvasInfo
	}
	return nil
}

func (x *LEDClientMessage) GetSetLedCanvas() *SetLEDCanvasRequest {
	if x, ok := x.GetMessage().(*LEDClientMessage_SetLedCanvas); ok {
		return x.SetLedCanvas
	}
	return nil
}

func (x *LEDClientMessage) GetGetLeds() *GetLEDsRequest {
	if x, ok := x.GetMessage().(*LEDClientMessage_GetLeds); ok {
		return x.GetLeds
	}
	return nil
}

func (x *LEDClientMessage) GetSetLeds() *SetLEDsRequest {
	if x, ok := x.GetMessage().(*LEDClientMessage_SetLeds); ok {
		return x.SetLeds
	}
	return nil
}

type isLEDClientMessage_Message interface {
	isLEDClientMessage_Message()
}

type LEDClientMessage_Authenticate struct {
	// Authenticate with the server. Sends back an AuthenticateResponse.
	// This must be the first message sent to the server, otherwise the
	// connection is closed.
	Authenticate *AuthenticateRequest `protobuf:"bytes,1,opt,name=authenticate,proto3,oneof"`
}

type LEDClientMessage_GetLedCanvasInfo struct {
	// Return information about the LED canvas. Sends back a
	// GetLEDCanvasInfoResponse.
	// The caller must use this information to determine the size of the image
	// to send to SetLEDCanvas.
	GetLedCanvasInfo *GetLEDCanvasInfoRequest `protobuf:"bytes,2,opt,name=get_led_canvas_info,json=getLedCanvasInfo,proto3,oneof"`
}

type LEDClientMessage_SetLedCanvas struct {
	// Set the LED canvas to the given image. For information on the image
	// format, see the documentation for SetLEDCanvasRequest.
	SetLedCanvas *SetLEDCanvasRequest `protobuf:"bytes,3,opt,name=set_led_canvas,json=setLedCanvas,proto3,oneof"`
}

type LEDClientMessage_GetLeds struct {
	// Get the current state of the LEDs. Sends back a GetLEDsResponse.
	GetLeds *GetLEDsRequest `protobuf:"bytes,4,opt,name=get_leds,json=getLeds,proto3,oneof"`
}

type LEDClientMessage_SetLeds struct {
	// Set all LEDs to the given colors. The number of colors must match the
	// number of LEDs. Calling this is equivalent to calling DeleteFrames
	// followed by AddFrames with a single frame.
	SetLeds *SetLEDsRequest `protobuf:"bytes,5,opt,name=set_leds,json=setLeds,proto3,oneof"`
}

func (*LEDClientMessage_Authenticate) isLEDClientMessage_Message() {}

func (*LEDClientMessage_GetLedCanvasInfo) isLEDClientMessage_Message() {}

func (*LEDClientMessage_SetLedCanvas) isLEDClientMessage_Message() {}

func (*LEDClientMessage_GetLeds) isLEDClientMessage_Message() {}

func (*LEDClientMessage_SetLeds) isLEDClientMessage_Message() {}

type LEDServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*LEDServerMessage_Authenticate
	//	*LEDServerMessage_GetLedCanvasInfo
	//	*LEDServerMessage_GetLeds
	Message isLEDServerMessage_Message `protobuf_oneof:"message"`
	// If present, the server encountered an error. This is a string describing
	// the error.
	Error *string `protobuf:"bytes,100,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *LEDServerMessage) Reset() {
	*x = LEDServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LEDServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LEDServerMessage) ProtoMessage() {}

func (x *LEDServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LEDServerMessage.ProtoReflect.Descriptor instead.
func (*LEDServerMessage) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{1}
}

func (m *LEDServerMessage) GetMessage() isLEDServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *LEDServerMessage) GetAuthenticate() *AuthenticateResponse {
	if x, ok := x.GetMessage().(*LEDServerMessage_Authenticate); ok {
		return x.Authenticate
	}
	return nil
}

func (x *LEDServerMessage) GetGetLedCanvasInfo() *GetLEDCanvasInfoResponse {
	if x, ok := x.GetMessage().(*LEDServerMessage_GetLedCanvasInfo); ok {
		return x.GetLedCanvasInfo
	}
	return nil
}

func (x *LEDServerMessage) GetGetLeds() *GetLEDsResponse {
	if x, ok := x.GetMessage().(*LEDServerMessage_GetLeds); ok {
		return x.GetLeds
	}
	return nil
}

func (x *LEDServerMessage) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type isLEDServerMessage_Message interface {
	isLEDServerMessage_Message()
}

type LEDServerMessage_Authenticate struct {
	// Response to AuthenticateRequest.
	Authenticate *AuthenticateResponse `protobuf:"bytes,1,opt,name=authenticate,proto3,oneof"`
}

type LEDServerMessage_GetLedCanvasInfo struct {
	// Response to GetLEDCanvasInfoRequest.
	GetLedCanvasInfo *GetLEDCanvasInfoResponse `protobuf:"bytes,2,opt,name=get_led_canvas_info,json=getLedCanvasInfo,proto3,oneof"`
}

type LEDServerMessage_GetLeds struct {
	// Response to GetLEDsRequest.
	GetLeds *GetLEDsResponse `protobuf:"bytes,3,opt,name=get_leds,json=getLeds,proto3,oneof"`
}

func (*LEDServerMessage_Authenticate) isLEDServerMessage_Message() {}

func (*LEDServerMessage_GetLedCanvasInfo) isLEDServerMessage_Message() {}

func (*LEDServerMessage_GetLeds) isLEDServerMessage_Message() {}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The secret to authenticate with. This is given beforehand, make sure you
	// have one before you try to authenticate.
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{2}
}

func (x *AuthenticateRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the authentication succeeded.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{3}
}

func (x *AuthenticateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetLEDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLEDsRequest) Reset() {
	*x = GetLEDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLEDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLEDsRequest) ProtoMessage() {}

func (x *GetLEDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLEDsRequest.ProtoReflect.Descriptor instead.
func (*GetLEDsRequest) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{4}
}

type GetLEDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A 1D array of colors. The number of colors matches the number of LEDs.
	// Each color is represented as 0xRRGGBB.
	Leds []uint32 `protobuf:"fixed32,1,rep,packed,name=leds,proto3" json:"leds,omitempty"`
}

func (x *GetLEDsResponse) Reset() {
	*x = GetLEDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLEDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLEDsResponse) ProtoMessage() {}

func (x *GetLEDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLEDsResponse.ProtoReflect.Descriptor instead.
func (*GetLEDsResponse) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{5}
}

func (x *GetLEDsResponse) GetLeds() []uint32 {
	if x != nil {
		return x.Leds
	}
	return nil
}

type SetLEDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A 1D array of colors. The number of colors must match the number of LEDs.
	// Eaech color is represented as 0xRRGGBB.
	// To get the number of LEDs, call GetLEDs.
	Leds []uint32 `protobuf:"fixed32,1,rep,packed,name=leds,proto3" json:"leds,omitempty"`
}

func (x *SetLEDsRequest) Reset() {
	*x = SetLEDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLEDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLEDsRequest) ProtoMessage() {}

func (x *SetLEDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLEDsRequest.ProtoReflect.Descriptor instead.
func (*SetLEDsRequest) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{6}
}

func (x *SetLEDsRequest) GetLeds() []uint32 {
	if x != nil {
		return x.Leds
	}
	return nil
}

type GetLEDCanvasInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLEDCanvasInfoRequest) Reset() {
	*x = GetLEDCanvasInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLEDCanvasInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLEDCanvasInfoRequest) ProtoMessage() {}

func (x *GetLEDCanvasInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLEDCanvasInfoRequest.ProtoReflect.Descriptor instead.
func (*GetLEDCanvasInfoRequest) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{7}
}

type GetLEDCanvasInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Width of the LED canvas, in pixels. This is also the stride.
	Width uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// Height of the LED canvas, in pixels.
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetLEDCanvasInfoResponse) Reset() {
	*x = GetLEDCanvasInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLEDCanvasInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLEDCanvasInfoResponse) ProtoMessage() {}

func (x *GetLEDCanvasInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLEDCanvasInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLEDCanvasInfoResponse) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{8}
}

func (x *GetLEDCanvasInfoResponse) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GetLEDCanvasInfoResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SetLEDCanvasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pixels to set. The number of pixels must match width * height as
	// returned by GetLEDCanvasInfo. See RGBAPixels for the format.
	Pixels *RGBAPixels `protobuf:"bytes,3,opt,name=pixels,proto3" json:"pixels,omitempty"`
}

func (x *SetLEDCanvasRequest) Reset() {
	*x = SetLEDCanvasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLEDCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLEDCanvasRequest) ProtoMessage() {}

func (x *SetLEDCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLEDCanvasRequest.ProtoReflect.Descriptor instead.
func (*SetLEDCanvasRequest) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{9}
}

func (x *SetLEDCanvasRequest) GetPixels() *RGBAPixels {
	if x != nil {
		return x.Pixels
	}
	return nil
}

type RGBAPixels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A 1D array of pixels, in row-major order. The number of pixels must match
	// width * height * 4, which is ordered as RGBA.
	Pixels []byte `protobuf:"bytes,1,opt,name=pixels,proto3" json:"pixels,omitempty"`
}

func (x *RGBAPixels) Reset() {
	*x = RGBAPixels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_christmas_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGBAPixels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGBAPixels) ProtoMessage() {}

func (x *RGBAPixels) ProtoReflect() protoreflect.Message {
	mi := &file_christmas_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGBAPixels.ProtoReflect.Descriptor instead.
func (*RGBAPixels) Descriptor() ([]byte, []int) {
	return file_christmas_proto_rawDescGZIP(), []int{10}
}

func (x *RGBAPixels) GetPixels() []byte {
	if x != nil {
		return x.Pixels
	}
	return nil
}

var File_christmas_proto protoreflect.FileDescriptor

var file_christmas_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x22, 0xf0, 0x02, 0x0a,
	0x10, 0x4c, 0x45, 0x44, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74,
	0x6d, 0x61, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x4c,
	0x65, 0x64, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0e,
	0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d,
	0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x45,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x4c, 0x65, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x98, 0x02, 0x0a, 0x10, 0x4c, 0x45, 0x44, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x72,
	0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x72, 0x69, 0x73,
	0x74, 0x6d, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x13, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x30, 0x0a, 0x14, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x45, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x04,
	0x6c, 0x65, 0x64, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x07, 0x52, 0x04, 0x6c, 0x65, 0x64, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4c, 0x45, 0x44, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x43,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x44, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4c, 0x45, 0x44, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d,
	0x61, 0x73, 0x2e, 0x52, 0x47, 0x42, 0x41, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x70,
	0x69, 0x78, 0x65, 0x6c, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x52, 0x47, 0x42, 0x41, 0x50, 0x69, 0x78,
	0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x42, 0x35, 0x5a, 0x33, 0x6c,
	0x69, 0x62, 0x64, 0x62, 0x2e, 0x73, 0x6f, 0x2f, 0x61, 0x63, 0x6d, 0x2d, 0x63, 0x68, 0x72, 0x69,
	0x73, 0x74, 0x6d, 0x61, 0x73, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74,
	0x6d, 0x61, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_christmas_proto_rawDescOnce sync.Once
	file_christmas_proto_rawDescData = file_christmas_proto_rawDesc
)

func file_christmas_proto_rawDescGZIP() []byte {
	file_christmas_proto_rawDescOnce.Do(func() {
		file_christmas_proto_rawDescData = protoimpl.X.CompressGZIP(file_christmas_proto_rawDescData)
	})
	return file_christmas_proto_rawDescData
}

var file_christmas_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_christmas_proto_goTypes = []interface{}{
	(*LEDClientMessage)(nil),         // 0: christmas.LEDClientMessage
	(*LEDServerMessage)(nil),         // 1: christmas.LEDServerMessage
	(*AuthenticateRequest)(nil),      // 2: christmas.AuthenticateRequest
	(*AuthenticateResponse)(nil),     // 3: christmas.AuthenticateResponse
	(*GetLEDsRequest)(nil),           // 4: christmas.GetLEDsRequest
	(*GetLEDsResponse)(nil),          // 5: christmas.GetLEDsResponse
	(*SetLEDsRequest)(nil),           // 6: christmas.SetLEDsRequest
	(*GetLEDCanvasInfoRequest)(nil),  // 7: christmas.GetLEDCanvasInfoRequest
	(*GetLEDCanvasInfoResponse)(nil), // 8: christmas.GetLEDCanvasInfoResponse
	(*SetLEDCanvasRequest)(nil),      // 9: christmas.SetLEDCanvasRequest
	(*RGBAPixels)(nil),               // 10: christmas.RGBAPixels
}
var file_christmas_proto_depIdxs = []int32{
	2,  // 0: christmas.LEDClientMessage.authenticate:type_name -> christmas.AuthenticateRequest
	7,  // 1: christmas.LEDClientMessage.get_led_canvas_info:type_name -> christmas.GetLEDCanvasInfoRequest
	9,  // 2: christmas.LEDClientMessage.set_led_canvas:type_name -> christmas.SetLEDCanvasRequest
	4,  // 3: christmas.LEDClientMessage.get_leds:type_name -> christmas.GetLEDsRequest
	6,  // 4: christmas.LEDClientMessage.set_leds:type_name -> christmas.SetLEDsRequest
	3,  // 5: christmas.LEDServerMessage.authenticate:type_name -> christmas.AuthenticateResponse
	8,  // 6: christmas.LEDServerMessage.get_led_canvas_info:type_name -> christmas.GetLEDCanvasInfoResponse
	5,  // 7: christmas.LEDServerMessage.get_leds:type_name -> christmas.GetLEDsResponse
	10, // 8: christmas.SetLEDCanvasRequest.pixels:type_name -> christmas.RGBAPixels
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_christmas_proto_init() }
func file_christmas_proto_init() {
	if File_christmas_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_christmas_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LEDClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LEDServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLEDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLEDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLEDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLEDCanvasInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLEDCanvasInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLEDCanvasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_christmas_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGBAPixels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_christmas_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LEDClientMessage_Authenticate)(nil),
		(*LEDClientMessage_GetLedCanvasInfo)(nil),
		(*LEDClientMessage_SetLedCanvas)(nil),
		(*LEDClientMessage_GetLeds)(nil),
		(*LEDClientMessage_SetLeds)(nil),
	}
	file_christmas_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*LEDServerMessage_Authenticate)(nil),
		(*LEDServerMessage_GetLedCanvasInfo)(nil),
		(*LEDServerMessage_GetLeds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_christmas_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_christmas_proto_goTypes,
		DependencyIndexes: file_christmas_proto_depIdxs,
		MessageInfos:      file_christmas_proto_msgTypes,
	}.Build()
	File_christmas_proto = out.File
	file_christmas_proto_rawDesc = nil
	file_christmas_proto_goTypes = nil
	file_christmas_proto_depIdxs = nil
}
